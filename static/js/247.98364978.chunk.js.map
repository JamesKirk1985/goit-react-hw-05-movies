{"version":3,"file":"static/js/247.98364978.chunk.js","mappings":"oOAEO,SAAeA,EAAgBC,GAAA,OAAAC,EAAAC,MAAC,KAADC,UAAA,CAYrC,SAAAF,IAAA,OAAAA,GAAAG,EAAAA,EAAAA,GAAAC,IAAAA,MAZM,SAAAC,EAAgCC,GAAG,IAAAC,EAAAC,EAAA,OAAAJ,IAAAA,MAAA,SAAAK,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAQtC,MAPe,gCACD,mCAEVJ,EAAS,IAAIK,gBAAgB,CACjCC,QAHc,mCAIdC,SAAU,QACVC,KAAM,IACNN,EAAAE,KAAA,GAEqBK,EAAAA,EAAAA,GAAM,GAADC,OATX,iCASuBA,OAAGX,EAAG,KAAAW,OAAIV,IAAU,KAAD,EAA7C,OAARC,EAAQC,EAAAS,KAAAT,EAAAU,OAAA,SACPX,EAASY,MAAI,wBAAAX,EAAAY,OAAA,GAAAhB,EAAA,MACrBJ,MAAA,KAAAC,UAAA,CAEM,SAAeoB,EAAsBC,EAAAC,GAAA,OAAAC,EAAAxB,MAAC,KAADC,UAAA,CAY3C,SAAAuB,IAAA,OAAAA,GAAAtB,EAAAA,EAAAA,GAAAC,IAAAA,MAZM,SAAAsB,EAAsCpB,EAAKqB,GAAK,IAAApB,EAAAC,EAAA,OAAAJ,IAAAA,MAAA,SAAAwB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAQnD,MAPe,gCACD,mCACVJ,EAAS,IAAIK,gBAAgB,CACjCe,MAAAA,EACAd,QAHc,mCAIdC,SAAU,QACVC,KAAM,IACNa,EAAAjB,KAAA,GAEqBK,EAAAA,EAAAA,GAAM,GAADC,OATX,iCASuBA,OAAGX,EAAG,KAAAW,OAAIV,IAAU,KAAD,EAA7C,OAARC,EAAQoB,EAAAV,KAAAU,EAAAT,OAAA,SACPX,EAASY,MAAI,wBAAAQ,EAAAP,OAAA,GAAAK,EAAA,MACrBzB,MAAA,KAAAC,UAAA,C,wGCkBD,UAzCa,WAET,IAEM2B,GAAOC,EAAAA,EAAAA,MAEbC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAoBL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzBE,EAAED,EAAA,GAAEE,EAAKF,EAAA,GAsBhB,OApBAG,EAAAA,EAAAA,YAAU,WAEN,GADAD,EAAMX,EAAKa,SACPH,EAAI,CAAC,IAEUI,EAAa,eAAAC,GAAAzC,EAAAA,EAAAA,GAAAC,IAAAA,MAA5B,SAAAC,IAAA,IAAAe,EAAA,OAAAhB,IAAAA,MAAA,SAAAK,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEeb,EAAAA,EAAAA,GAAiB,SAADmB,OAAUY,EAAKa,QAAO,aAAW,OAClD,OADZtB,EAAIX,EAAAS,KACVkB,EAAQhB,EAAKe,MAAK1B,EAAAU,OAAA,SACXC,EAAKyB,SAAO,OAAApC,EAAAC,KAAA,EAAAD,EAAAqC,GAAArC,EAAA,SAGnBsC,QAAQC,IAAIvC,EAAAqC,GAAMG,SAAQ,yBAAAxC,EAAAY,OAAA,GAAAhB,EAAA,kBAE7B,kBATmC,OAAAuC,EAAA3C,MAAC,KAADC,UAAA,KAD5ByC,GAYJ,CACJ,GAAG,CAACd,EAAMU,KAIHW,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAF,EAAAA,EAAAA,KAAA,MAAAE,SACEjB,EAAKkB,OAAS,GAAKlB,EAAKmB,KAAI,SAAAC,GAAA,IAAGC,EAAID,EAAJC,KAAMC,EAAYF,EAAZE,aAAcC,EAASH,EAATG,UAAWnB,EAAEgB,EAAFhB,GAAE,OAAQoB,EAAAA,EAAAA,MAAA,MAAAP,SAAA,EACrEF,EAAAA,EAAAA,KAAA,OAAKU,IAAKH,EAAY,mCAAAxC,OAAqCwC,GA9BpD,8EA+BHI,MAAO,IACPC,IAAI,eACRZ,EAAAA,EAAAA,KAAA,KAAAE,SAAII,KACJG,EAAAA,EAAAA,MAAA,KAAAP,SAAA,CAAG,cAAaM,OAL8DnB,EAM7E,OAGjB,C","sources":["Api/Api.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport async function getMovieFunction(key) {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n  const API_kEY = '6cf08bceccc0db13a518bacd00fe5691';\n  //   const reviews = `movie/${movie_id}/reviews`;\n  const params = new URLSearchParams({\n    api_key: API_kEY,\n    language: 'en-US',\n    page: 1,\n  });\n\n  const response = await axios(`${BASE_URL}${key}?${params}`);\n  return response.data;\n}\n\nexport async function getSearchMovieFunction(key, query) {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n  const API_kEY = '6cf08bceccc0db13a518bacd00fe5691';\n  const params = new URLSearchParams({\n    query,\n    api_key: API_kEY,\n    language: 'en-US',\n    page: 1,\n  });\n\n  const response = await axios(`${BASE_URL}${key}?${params}`);\n  return response.data;\n}\n","import { useState, useEffect } from \"react\"\nimport { getMovieFunction } from \"Api/Api\"\nimport { useParams } from \"react-router-dom\"\n\n\nconst Cast = () => {\n    \n    const defaultImg = 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700'\n    \n    const film = useParams()\n    \n    const [cast, setCast] = useState([])\n    const [id, setId] = useState('')\n\n    useEffect(() => {\n        setId(film.movieId);\n        if (id) {\n            getMoviesCast()\n            async function getMoviesCast() { \n    try {\n        const data = await getMovieFunction(`movie/${film.movieId}/credits`)        \n        setCast(data.cast)        \n        return data.results\n        \n    } catch (error) {\n        console.log(error.message)\n    }\n    }   \n        \n        };        \n    }, [film, id])\n\n    \n    \n    return <>\n           <ul>\n            {cast.length > 0 && cast.map(({ name, profile_path, character, id }) => (<li key={id}>\n                <img src={profile_path ?`https://image.tmdb.org/t/p/w500/${profile_path}`: defaultImg}\n                    width={100}\n                    alt=\"actor img\"/>                \n                <p>{name}</p>\n                <p>character: { character}</p>\n            </li>))}\n        </ul>\n    </>\n}\nexport default Cast"],"names":["getMovieFunction","_x","_getMovieFunction","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","key","params","response","_context","prev","next","URLSearchParams","api_key","language","page","axios","concat","sent","abrupt","data","stop","getSearchMovieFunction","_x2","_x3","_getSearchMovieFunction","_callee2","query","_context2","film","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","id","setId","useEffect","movieId","getMoviesCast","_ref","results","t0","console","log","message","_jsx","_Fragment","children","length","map","_ref2","name","profile_path","character","_jsxs","src","width","alt"],"sourceRoot":""}